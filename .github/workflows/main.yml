name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build backend
        working-directory: ./lab1/backend
        run: mvn clean package -DskipTests

      - name: Set up Node JS
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: ./lab1/frontend
        run: npm install

      - name: Build frontend
        working-directory: ./lab1/frontend
        run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Test backend
        working-directory: ./lab1/backend
        run: mvn test

      - name: Install frontend dependencies
        working-directory: ./lab1/frontend
        run: npm install

      - name: Test frontend with coverage
        working-directory: ./lab1/frontend
        run: npm test -- --watchAll=false --coverage --coverageReporters=lcov
      
      - name: Debug lcov.info
        run: cat coverage/lcov.info | head -n 20
        working-directory: ./lab1/frontend
      
      - name: Upload Frontend Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: lab1/frontend/coverage/lcov.info
    
  sonar_qube:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: lab1/frontend/coverage

      - name: Build with Maven
        working-directory: ./lab1/backend
        run: mvn clean verify

      - name: Backend SonarCloud Scan
        working-directory: ./lab1/backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=chetter14_devops_backend \
            -Dsonar.organization=chetter14 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.qualitygate.wait=true

      - name: Frontend SonarCloud Scan
        working-directory: ./lab1/frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm install -g sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=chetter14_devops_frontend \
            -Dsonar.organization=chetter14 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.qualitygate.wait=true

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: sonar_qube
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
     
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./lab1/backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/itmo-devops-library-backend-vl:latest

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./lab1/frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/itmo-devops-library-frontend-vl:latest

  deploy:
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create separate directory
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.YC_VM_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~
            rm -rf app_deploy
            mkdir app_deploy

      - name: Copy files via SCP
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.YC_VM_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "kubernetes/configs/*"
          target: "~/app_deploy"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.YC_VM_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/app_deploy/kubernetes/configs
            sudo kubectl delete secret yc-prometheus-token
            sudo kubectl create secret generic yc-prometheus-token \
                --from-literal=token="${{ secrets.YC_PROM_KEY }}" \
                --namespace=default
            sudo kubectl delete deployments --all
            sudo kubectl apply -f .
            sudo kubectl rollout restart deployment prometheus
            # Apply Metrics Server
            sudo kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
            sudo kubectl scale deployment frontend --replicas=1
            sudo kubectl scale deployment backend --replicas=1
            sudo kubectl scale deployment postgres --replicas=1
            sudo kubectl scale deployment prometheus --replicas=1
