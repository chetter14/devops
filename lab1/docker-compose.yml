version: '3.9'

services:
  frontend:
    image: timur43/itmo-devops-library-frontend-vl:latest
    container_name: itmo-devops-library-frontend-vl-container
    environment:
      REACT_APP_API_HOST: backend
    ports:
      - "3000:3000"
    expose:
      - 80
    depends_on:
      - backend
    networks:
      - devops_network
  backend:
    image: timur43/itmo-devops-library-backend-vl:latest
    container_name: itmo-devops-library-backend-vl-container
    environment:
      DB_HOST: postgres
    expose:
      - 8080
    depends_on:
      - postgres
    networks:
      - devops_network
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: library
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d library" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - devops_network

volumes:
  pgdata:
    driver: local

networks:
  devops_network:
    driver: bridge